"""
Neuro Store - FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
"""

import time
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.exceptions import RequestValidationError
from jose import JWTError
from sqlalchemy.exc import IntegrityError, OperationalError

from app.core.config import settings
from app.core.logging_config import configure_logging, get_logger, log_request
from app.core.exceptions import (
    validation_exception_handler,
    jwt_exception_handler,
    integrity_exception_handler,
    operational_exception_handler,
    generic_exception_handler,
    neuro_store_exception_handler,
    NeuroStoreException
)
from app.core.limiter import init_limiter, close_limiter
from app.services.cache import init_cache, close_cache
from app.api.v1 import auth, products, subscriptions, admin, roles, payments

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
configure_logging()
logger = get_logger("neuro_store.main")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Neuro Store API", 
                version=settings.PROJECT_VERSION,
                environment=settings.APP_ENV)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        await init_cache()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate limiter
        await init_limiter()
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤", error=str(e))
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Neuro Store API")
    
    try:
        await close_cache()
        await close_limiter()
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤", error=str(e))


def create_application() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    app = FastAPI(
        title=settings.PROJECT_NAME,
        description=settings.PROJECT_DESCRIPTION,
        version=settings.PROJECT_VERSION,
        lifespan=lifespan,
        docs_url="/docs",
        redoc_url="/redoc",
        openapi_url="/openapi.json",
        contact={
            "name": "Neuro Store Support",
            "email": "support@neurostore.com",
            "url": "https://github.com/wvwvw5/neuro_store"
        },
        license_info={
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        openapi_tags=[
            {
                "name": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                "description": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏"
            },
            {
                "name": "–ü—Ä–æ–¥—É–∫—Ç—ã",
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏"
            },
            {
                "name": "–ü–æ–¥–ø–∏—Å–∫–∏",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            },
            {
                "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
            },
            {
                "name": "–†–æ–ª–∏",
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"
            }
        ]
    )

    # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    @app.middleware("http")
    async def log_requests(request: Request, call_next):
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        process_time = time.time() - start_time
        log_request(
            method=request.method,
            url=str(request.url),
            status_code=response.status_code,
            response_time=process_time
        )
        
        return response

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    cors_origins = settings.CORS_ORIGINS.split(",") if settings.CORS_ORIGINS else ["*"]
    app.add_middleware(
        CORSMiddleware,
        allow_origins=cors_origins,
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        allow_headers=["*"],
        expose_headers=["*"],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
    app.add_exception_handler(RequestValidationError, validation_exception_handler)
    app.add_exception_handler(JWTError, jwt_exception_handler)
    app.add_exception_handler(IntegrityError, integrity_exception_handler)
    app.add_exception_handler(OperationalError, operational_exception_handler)
    app.add_exception_handler(NeuroStoreException, neuro_store_exception_handler)
    app.add_exception_handler(Exception, generic_exception_handler)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤
    app.include_router(auth.router, prefix=settings.API_V1_STR)
    app.include_router(products.router, prefix=settings.API_V1_STR)
    app.include_router(subscriptions.router, prefix=settings.API_V1_STR)
    app.include_router(admin.router, prefix=settings.API_V1_STR)
    app.include_router(roles.router, prefix=settings.API_V1_STR)
    app.include_router(payments.router, prefix=settings.API_V1_STR)

    return app


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_application()


@app.get("/", 
         summary="–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç",
         description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö",
         tags=["–û–±—â–∏–µ"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ API"""
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Neuro Store API!",
        "version": settings.PROJECT_VERSION,
        "environment": settings.APP_ENV,
        "docs": "/docs",
        "redoc": "/redoc",
        "status": "healthy"
    }


@app.get("/health",
         summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è",
         description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤",
         tags=["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    health_status = {
        "status": "healthy",
        "timestamp": time.time(),
        "version": settings.PROJECT_VERSION,
        "environment": settings.APP_ENV
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    try:
        from app.services.cache import redis_client
        if redis_client:
            await redis_client.ping()
            health_status["redis"] = "connected"
        else:
            health_status["redis"] = "not_initialized"
    except Exception:
        health_status["redis"] = "disconnected"
    
    return health_status


@app.get("/api/v1/health",
         summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API v1",
         description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –≤–µ—Ä—Å–∏–∏ 1",
         tags=["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"])
async def api_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API v1"""
    return {
        "status": "healthy",
        "api_version": "v1",
        "timestamp": time.time(),
        "endpoints": {
            "auth": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞",
            "products": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞", 
            "subscriptions": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞",
            "admin": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞",
            "roles": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞",
            "payments": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞"
        }
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.APP_ENV == "development",
        log_level=settings.LOG_LEVEL.lower()
    )