# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Neuro Store

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE = ops/docker-compose.yml
ENV_FILE = ops/.env

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

.PHONY: help up down logs restart clean build migrate seed backup restore test lint format check-env

# –ü–æ–º–æ—â—å
help:
	@echo "$(GREEN)Neuro Store - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è$(NC)"
	@echo ""
	@echo "$(YELLOW)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo "  up          –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  down        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  restart     –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  logs        –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
	@echo "  clean       –û—á–∏—Å—Ç–∫–∞ volumes –∏ containers"
	@echo ""
	@echo "$(YELLOW)–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:$(NC)"
	@echo "  migrate     –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"
	@echo "  seed        –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
	@echo "  backup      –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î"
	@echo "  restore     –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ –±—ç–∫–∞–ø–∞"
	@echo ""
	@echo "$(YELLOW)–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:$(NC)"
	@echo "  test        –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
	@echo "  lint        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏"
	@echo "  format      –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
	@echo "  check-env   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo ""
	@echo "$(YELLOW)–ü—Ä–∏–º–µ—Ä—ã:$(NC)"
	@echo "  make up                    # –ó–∞–ø—É—Å–∫ –≤ development —Ä–µ–∂–∏–º–µ"
	@echo "  make up ENV=production     # –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ"
	@echo "  make logs SERVICE=backend  # –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
	@echo "  make users                 # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
	@echo "  make admin                 # –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check-env:
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ops/.env.example –≤ ops/.env$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω$(NC)"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
up: check-env
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ Neuro Store...$(NC)"
	docker compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) up --build -d
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!$(NC)"
	@echo ""
	@echo "$(YELLOW)üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  Frontend:    http://localhost:3000"
	@echo "  Backend API: http://localhost:8000"
	@echo "  Swagger UI:  http://localhost:8000/docs"
	@echo "  pgAdmin:     http://localhost:5050"
	@echo "  Redis UI:    http://localhost:8081 (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
down:
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º volumes
down-volumes:
	@echo "$(RED)üóëÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	docker compose -f $(COMPOSE_FILE) down -v
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã$(NC)"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
restart:
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker compose -f $(COMPOSE_FILE) restart
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã$(NC)"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
restart-service:
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)–£–∫–∞–∂–∏—Ç–µ SERVICE. –ü—Ä–∏–º–µ—Ä: make restart-service SERVICE=backend$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ $(SERVICE)...$(NC)"
	docker compose -f $(COMPOSE_FILE) restart $(SERVICE)
	@echo "$(GREEN)‚úÖ $(SERVICE) –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω$(NC)"

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
logs:
	@if [ -n "$(SERVICE)" ]; then \
		echo "$(YELLOW)üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ $(SERVICE):$(NC)"; \
		docker compose -f $(COMPOSE_FILE) logs -f $(SERVICE); \
	else \
		echo "$(YELLOW)üìã –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"; \
		docker compose -f $(COMPOSE_FILE) logs -f; \
	fi

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build:
	@echo "$(YELLOW)üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker compose -f $(COMPOSE_FILE) build
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã$(NC)"

# –û—á–∏—Å—Ç–∫–∞
clean:
	@echo "$(RED)üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker compose -f $(COMPOSE_FILE) down -v --rmi all --remove-orphans
	docker system prune -f
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
migrate:
	@echo "$(YELLOW)üóÑÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	docker compose -f $(COMPOSE_FILE) exec backend alembic upgrade head
	@echo "$(GREEN)‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã$(NC)"

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
migration:
	@if [ -z "$(MESSAGE)" ]; then \
		echo "$(RED)–£–∫–∞–∂–∏—Ç–µ MESSAGE. –ü—Ä–∏–º–µ—Ä: make migration MESSAGE='add user table'$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: $(MESSAGE)$(NC)"
	docker compose -f $(COMPOSE_FILE) exec backend alembic revision --autogenerate -m "$(MESSAGE)"
	@echo "$(GREEN)‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞$(NC)"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
seed:
	@echo "$(YELLOW)üå± –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	docker compose -f $(COMPOSE_FILE) exec db psql -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-neuro_store} -f /docker-entrypoint-initdb.d/02_init_data.sql
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã$(NC)"

# –ë—ç–∫–∞–ø –ë–î
backup:
	@echo "$(YELLOW)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î...$(NC)"
	@mkdir -p db/backup
	docker compose -f $(COMPOSE_FILE) exec db pg_dump -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-neuro_store} > db/backup/backup_`date +%Y%m%d_%H%M%S`.sql
	@echo "$(GREEN)‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ db/backup/$(NC)"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
restore:
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)–£–∫–∞–∂–∏—Ç–µ FILE. –ü—Ä–∏–º–µ—Ä: make restore FILE=db/backup/backup_20240101.sql$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ $(FILE)...$(NC)"
	docker compose -f $(COMPOSE_FILE) exec -T db psql -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-neuro_store} < $(FILE)
	@echo "$(GREEN)‚úÖ –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
test:
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	pytest -v --cov=app --cov-report=term-missing
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ Docker
test-docker:
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ Docker...$(NC)"
	docker compose -f $(COMPOSE_FILE) exec backend pytest -v
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –≤ Docker –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

# –õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞
lint:
	@echo "$(YELLOW)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏...$(NC)"
	ruff check app/ tests/
	black --check app/ tests/
	isort --check-only app/ tests/
	mypy app/
	@echo "$(GREEN)‚úÖ –õ–∏–Ω—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
format:
	@echo "$(YELLOW)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	black app/ tests/
	isort app/ tests/
	ruff --fix app/ tests/
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(NC)"

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
status:
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker compose -f $(COMPOSE_FILE) ps

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
stats:
	@echo "$(YELLOW)üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:$(NC)"
	docker stats --no-stream

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db-shell:
	@echo "$(YELLOW)üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...$(NC)"
	docker compose -f $(COMPOSE_FILE) exec db psql -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-neuro_store}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis-shell:
	@echo "$(YELLOW)üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...$(NC)"
	docker compose -f $(COMPOSE_FILE) exec redis redis-cli

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
backend-shell:
	@echo "$(YELLOW)üêç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend...$(NC)"
	docker compose -f $(COMPOSE_FILE) exec backend bash

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
frontend-shell:
	@echo "$(YELLOW)‚öõÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ frontend...$(NC)"
	docker compose -f $(COMPOSE_FILE) exec frontend sh

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
health:
	@echo "$(YELLOW)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@curl -s http://localhost:8000/health | jq . || echo "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@curl -s http://localhost:3000 > /dev/null && echo "Frontend: ‚úÖ OK" || echo "Frontend: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# Production –∫–æ–º–∞–Ω–¥—ã
prod-up:
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –≤ PRODUCTION —Ä–µ–∂–∏–º–µ...$(NC)"
	docker compose -f $(COMPOSE_FILE) --profile production up --build -d
	@echo "$(GREEN)‚úÖ Production —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã$(NC)"

prod-down:
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ production —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker compose -f $(COMPOSE_FILE) --profile production down
	@echo "$(GREEN)‚úÖ Production —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
tools-up:
	@echo "$(YELLOW)üõ†Ô∏è –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...$(NC)"
	docker compose -f $(COMPOSE_FILE) --profile tools up -d
	@echo "$(GREEN)‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã$(NC)"
	@echo "  Redis Commander: http://localhost:8081"

tools-down:
	@echo "$(YELLOW)üõ†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...$(NC)"
	docker compose -f $(COMPOSE_FILE) --profile tools down
	@echo "$(GREEN)‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users:
	@echo "$(YELLOW)üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:$(NC)"
	docker compose -f $(COMPOSE_FILE) exec db psql -U postgres -d neuro_store -c "SELECT id, email, first_name, last_name, is_active, created_at FROM users ORDER BY id;"

# –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞
admin:
	@echo "$(YELLOW)üõ°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...$(NC)"
	@read -p "Email: " email; \
	read -s -p "–ü–∞—Ä–æ–ª—å: " password; \
	echo; \
	read -p "–ò–º—è: " first_name; \
	read -p "–§–∞–º–∏–ª–∏—è: " last_name; \
	echo "$(GREEN)–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...$(NC)"; \
	curl -s -X POST http://localhost:8000/api/v1/auth/register -H "Content-Type: application/json" -d "{\"email\":\"$$email\",\"password\":\"$$password\",\"first_name\":\"$$first_name\",\"last_name\":\"$$last_name\"}" | python3 -m json.tool; \
	echo "$(GREEN)‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!$(NC)"
