version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: neuro_store_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-neuro_store}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../db/init:/docker-entrypoint-initdb.d
      - ../db/backup:/backup
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    networks:
      - neuro_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-neuro_store}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кэширования и rate limiting
  redis:
    image: redis:7-alpine
    container_name: neuro_store_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - neuro_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ..
      dockerfile: ops/Dockerfile.backend
    container_name: neuro_store_backend
    environment:
      - APP_ENV=${APP_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-neuro_store}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-change-in-production}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-60}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      - RATE_LIMIT_DEFAULT=${RATE_LIMIT_DEFAULT:-20/minute}
      - RATE_LIMIT_LOGIN=${RATE_LIMIT_LOGIN:-5/minute}
      - RATE_LIMIT_REGISTER=${RATE_LIMIT_REGISTER:-3/minute}
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS:-120}
      - PROJECT_NAME=${PROJECT_NAME:-Neuro Store API}
      - PROJECT_VERSION=${PROJECT_VERSION:-1.0.0}
      - PROJECT_DESCRIPTION=${PROJECT_DESCRIPTION:-API для магазина подписок на нейросетевые сервисы}
    volumes:
      - ../app:/app/app
      - ../tests:/app/tests
      - ../alembic.ini:/app/alembic.ini
      - ../alembic:/app/alembic
      - ../requirements.txt:/app/requirements.txt
    ports:
      - "8000:8000"
    networks:
      - neuro_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ../client
      dockerfile: ../ops/Dockerfile.frontend
    container_name: neuro_store_frontend
    environment:
      - NEXT_PUBLIC_API_BASE=${NEXT_PUBLIC_API_BASE:-http://localhost:8000}
      - NEXT_PUBLIC_ENVIRONMENT=${NEXT_PUBLIC_ENVIRONMENT:-development}
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - ../client:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - neuro_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin для управления БД
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: neuro_store_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@neurostore.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: ${PGADMIN_CONFIG_SERVER_MODE:-False}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - neuro_network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  # Redis Commander для управления Redis (опционально)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: neuro_store_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - neuro_network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - tools

  # Nginx reverse proxy (для production)
  nginx:
    image: nginx:alpine
    container_name: neuro_store_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - neuro_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

networks:
  neuro_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16